{% load common %}/**
 * Gridpak Beta SCSS 
 *
 * Generator - http://gridpak.com/
 * Created by @erskinedesign
 */

/* --- Default Gridpak column styles -- No need to change --- */

 @mixin span($num, $gutter_pc, $gutter_px, $padding, $max_columns) {
    $one_col: (100% - ($gutter_pc * ($max_columns - 1))) / $max_columns;
    width:($one_col * $num) + ($gutter_pc * ($num - 1));
    border:0px solid rgba(0,0,0,0);
    float:left;
    -webkit-box-sizing:border-box;
    -moz-box-sizing:border-box;
    box-sizing:border-box;
    -moz-background-clip:padding-box !important;
    -webkit-background-clip:padding-box !important;
    background-clip:padding-box !important;
    border-left-width:$gutter_px;
    padding:$padding;
    margin-left:$gutter_pc;
 }
 @mixin span_first {
    margin-left:0;
 }
 
{% for grid in grids %}

	/* ------{{ forloop.counter }}. {{ grid.col_num }} Column Grid {{ grid.min_width }}px - {% if grid.upper %}{{ grid.upper }}px{% else %}Infinity{% endif %} ------ */
	
	@media screen and (min-width: {{ grid.min_width }}px){% if grid.upper %} and (max-width: {{ grid.upper }}px){% endif %} {
        {% if grid.gutter_type == 'px' %}
        .row {
            margin-left:-{{ grid.gutter_width }}{{ grid.gutter_type }};
        }
        {% endif %}
        /* --- Gridpak variables ---*/ 
        $max_columns: {{ grid.col_num }};
        $padding: 0 {{ grid.padding_width }}{{ grid.padding_type }};
        $gutter_px: {% if grid.gutter_type == 'px' %}{{ grid.gutter_width }}px{% else %}0{% endif %};
        $gutter_pc: {% if grid.gutter_type == '%' %}{{ grid.gutter_width }}%{% else %}0{% endif %};
        
        // Example span:
        .span_1 {
            @include span(1, $gutter_pc, $gutter_px, $padding, $max_columns);
        }

        // Only use the first child for % gutters, px based ones don't need it
        {% if grid.gutter_type == '%' %}
        .span_1:first-child {
            @include span_first;
        }
        {% endif %}

	} /* end media query */
{% endfor %}
